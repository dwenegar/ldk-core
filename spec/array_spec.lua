local array = require 'ldk.array'

local function apple() return {name='apple',color='red',price=200} end
local function banana() return {name='banana',color='yello',price=50} end
local function orange() return {name='orange',color='orange',price=100} end
local function fixtures() return {apple(),banana(),orange()} end

local function eq(v) return function(x) return x == v end end
local function lt(v) return function(x) return x < v end end
local function gt(v) return function(x) return x > v end end
local function id(x) return x end
local function pluck(name) return function(x) return x[name] end end
local function always(v) return function() return v end end

describe("#array", function()
  describe("of", function()
    it("should create an array with the given values", function()
      assert.same({}, array.of())
      assert.same({1,2}, array.of(1,2))
    end)
  end)
  describe("seq", function()
    it("should create a sequence with the given parameters", function()
      assert.same({}, array.seq(0))
      assert.same({7, 8}, array.seq(2, 7, 1))
      assert.same({0, 0.5, 1}, array.seq(3, 0, 0.5))
      assert.same({2, 1, 0}, array.seq(3, 2, -1))
    end)
  end)
  describe("with", function()
    it("should create an array with the given generator", function()
      assert.same({}, array.with(0))
      assert.same({1,2}, array.with(2, id))
    end)
  end)
  describe("rep", function()
    it("should create an array with the given value", function()
      assert.same({}, array.rep(0))
      assert.same({1,1}, array.rep(2, 1))
    end)
  end)
  describe("cat", function()
    it("should concatenate the given arrays", function()
      assert.same({}, array.cat())
      assert.same({}, array.cat({}))
      assert.same({1}, array.cat({1}))
      assert.same({1}, array.cat({1}, {}))
      assert.same({1}, array.cat({}, {1}))
      assert.same({1,2}, array.cat({1}, {2}))
      assert.same({1,2,3}, array.cat({1}, {2}, {3}))
    end)
  end)
  describe("toset", function()
    it("should turn the given array into a set", function()
      assert.same({}, array.toset({}))
      assert.same({[1] = true}, array.toset({1,1}))
      assert.same({[1] = true, ['1337'] = true}, array.toset({1,1, '1337'}))
    end)
  end)
  describe("tomap", function()
    it("should turn the given array into a map", function()
      assert.same({}, array.tomap({}))
      assert.same({[1] = 1}, array.tomap({1,1}))
      assert.same({[1] = 'number', ['1337'] = 'string'}, array.tomap({1,1, '1337'}, type))
    end)
  end)
  describe("aggregate", function()
    it("should reduce to a value", function()
      assert.equal(0, array.aggregate({}, 0, function(x, y)
        return x + y
      end))
      assert.equal(0, array.aggregate({}, 0, function(x, y)
        return x + y
      end))
      assert.equal(350, array.aggregate(fixtures(), 0, function(x, y)
        return x.price + y
      end))
      assert.equal(350, array.aggregate(fixtures(), 0, function(x, y)
        return x.price + y
      end))
    end)
  end)
  describe("sum", function()
    it("should return the sum of the elements of the array", function()
      assert.equal(0, array.sum({}))
      assert.equal(6, array.sum({1,2,3}, id))
    end)
    it("shold report bad arguments", function()
      assert.error(function()
        array.sum({"not a number"})
      end)
    end)
  end)
  describe("avg", function()
    it("should return the average of the elements of the array", function()
      assert.is_nil(array.avg({}))
      assert.equal(3, array.avg({1,3, 5}))
      assert.equal(6, array.avg({1,3, 5}, function(x)
        return 2 * x
      end))
    end)
    it("shold report bad arguments", function()
      assert.error(function()
        array.avg({"not a number"})
      end)
    end)
  end)
  describe("all", function()
    it("should return true if the condition is true for all the elements of the array", function()
      assert.is_true(array.all({}, always(false)))
      assert.is_true(array.all({1,2}, always(true)))
      assert.is_true(array.all({1,2,3}, gt(0)))
    end)
    it("should return false if the condition is false for any of the  elements of the array", function()
      assert.is_false(array.all({1,2,3}, lt(2)))
    end)
  end)
  describe("any", function()
    it("should return true if the condition is true for any of the elements of the array", function()
      assert.is_true(array.any({}, always(false)))
      assert.is_true(array.any({1,2,3}, eq(3)))
    end)
    it("should return false if the condition is false for all the elements of the array", function()
      assert.is_false(array.any({1,2,3}, eq(0)))
    end)
  end)
  describe("count", function()
    it("should count all elements satisfying the given condition", function()
      assert.equal(3, array.count({1,2,3}, always(true)))
      assert.equal(0, array.count({1,2,3}, gt(3)))
      assert.equal(2, array.count({1,2,3}, lt(3)))
    end)
  end)
  describe("distinct", function()
    it("should returns the distinct elements", function()
      assert.same({}, array.distinct({}))
      assert.same({1}, array.distinct({1}))
      assert.same({1,2}, array.distinct({1,2,1,2,1}))
    end)
  end)
  describe("except", function()
    it("should returns the set difference of the arrays", function()
      assert.same({}, array.except({}))
      assert.same({}, array.except({1}, {1}))
      assert.same({1,2}, array.except({1,2,3}, {3}))
    end)
  end)
  describe("intersect", function()
    it("should returns the set intersection of the arrays", function()
      assert.same({}, array.intersect({}, {}))
      assert.same({}, array.intersect({1}, {}))
      assert.same({}, array.intersect({}, {1}))
      assert.same({3,3,4}, array.intersect({1,2,3,3,4,5}, {3,3,4}))
    end)
  end)
  describe("filter", function()
    it("should return the elements satisfying the condition", function()
      assert.same({}, array.filter({}, always(true)))
      assert.same({}, array.filter({1,2,3}, always(false)))
      assert.same({1,2,3}, array.filter({1,2,3}, always(true)))
      assert.same({1,2}, array.filter({1,2,3}, function(x) return x < 3 end))
    end)
  end)
  describe("map", function()
    it("should apply the transform function to each element", function()
      assert.same({}, array.map({}, always(true)))
      assert.same({2, 4, 6}, array.map({1,2,3}, function(x)
        return 2 * x
      end))
    end)
  end)
  describe("mapmany", function()
    it("should apply the transform function to each element", function()
      assert.same({}, array.mapmany({{}}, id))
      assert.same({1,2,3, 4}, array.mapmany({{1}, {2, 3}, {4}}, id))
    end)
  end)
  describe("groupby", function()
    it("should group elements by the given selector", function()
      assert.same({[1] = {1,1}, [3] = {3,3}, [5] = {5,5}}, array.groupby({1,1,3,3,5,5}, id))
    end)
  end)
  describe("max", function()
    it("should return maximum element in the array", function()
      assert.is_nil(array.max({}))
      assert.equal(3, array.max({1,2,3}))
      assert.error(function()
        array.max({{}, {}})
      end)
    end)
  end)
  describe("maxby", function()
    it("should return maximum element in the array according to f", function()
      assert.is_nil(array.maxby({}, function(x)
        return x
      end))
      assert.same(apple(), array.maxby(fixtures(), pluck('price')))
    end)
  end)
  describe("min", function()
    it("should return minimum element in the array", function()
      assert.is_nil(array.min({}))
      assert.equal(1, array.min({1,2,3}))
      assert.error(function()
        array.min({{}, {}})
      end)
    end)
  end)
  describe("minby", function()
    it("should return the minimum element in the array according to f", function()
      assert.is_nil(array.minby({}, function(x)
        return x
      end))
      assert.same(banana(), array.minby(fixtures(), pluck('price')))
    end)
  end)
  describe("drop", function()
    it("should drop the specified number of elements", function()
      assert.same({}, array.drop({}, 2))
      assert.same({3,4,5}, array.drop({1,2,3,4,5}, 2))
    end)
  end)
  describe("dropwhile", function()
    it("should drop elements while the predicate is true", function()
      assert.same({}, array.dropwhile({}, always(true)))
      assert.same({3,4,5}, array.dropwhile({1,2,3,4,5}, lt(3)))
      assert.same({1,2,3,4,5}, array.dropwhile({1,2,3,4,5}, lt(0)))
    end)
  end)
  describe("take", function()
    it("should return the first n elements", function()
      assert.same({1}, array.take({1,2}))
      assert.same({1,2}, array.take({1,2}, 2))
    end)
  end)
  describe("takewhile", function()
    it("should return the first elements satisfying the condition", function()
      assert.same({1,1}, array.takewhile({1,1,2}, lt(2)))
      assert.same({1,2}, array.takewhile({1,2}, always(true)))
    end)
  end)
  describe("zip", function()
    it("should zip two arrays together", function()
      assert.same({{1,2}, {2, 3}}, array.zip({1,2}, {2, 3}))
      assert.same({{1,2}}, array.zip({1,2}, {2}))
      assert.same({}, array.zip({1,2}, {}))
    end)
  end)
  describe("binsearch", function()
    it("should return the index of the first element equal to the input value", function()
      assert.is_nil(array.binsearch({1,2,3,3,5}, 0))
      assert.is_nil(array.binsearch({1,2,3,3,5}, 1,2))
      assert.is_nil(array.binsearch({1,2,3,3,5}, 5, 2, 4))
      assert.equals(3, array.binsearch({1,2,3,3,5}, 3))
      assert.equals(3, array.binsearch({1,2,3,3,5}, 3, 2))
      assert.equals(3, array.binsearch({1,2,3,3,5}, 3, 2, 4))
    end)
  end)
  describe("copy", function()
    it("should copy the specified range", function()
      assert.same({1,2}, array.copy({1,2,3},1,2, {}))
      assert.same({3,4,5}, array.copy({1,2,3,4,5}, 3, 5, {1,2}))
      assert.same({1,3,4,5}, array.copy({1,2,3,4,5}, 3, 5, {1,2}, 2))
      assert.same({2,3,4}, array.copy({1,2,3,4,5}, -4, -2, {}))
    end)
  end)
  describe("cmp", function()
    it("should return -1 when a1 < a2", function()
      assert.equal(-1, array.cmp({1,2}, {1,3}))
      assert.equal(-1, array.cmp({}, {1}))
    end)
    it("should return 0 when a1 == a2", function()
      assert.equal(0, array.cmp({}, {}))
      assert.equal(0, array.cmp({1,2}, {1,2}))
    end)
    it("should return 1 when a1 > a2", function()
      assert.equal(1, array.cmp({1}, {}))
      assert.equal(1, array.cmp({1,3}, {1,2}))
    end)
  end)
  describe("eq", function()
    it("should return true when the arrays are the same", function()
      assert.is_true(array.eq({}, {}))
      assert.is_true(array.eq({1,2,3}, {1,2,3}))
      assert.is_true(array.eq({1,2,3}, {1,2,3}, function(x, y)
        return x == y
      end))
    end)
    it("should return false when the arrays are different", function()
      assert.is_false(array.eq({}, {1,2,3}))
      assert.is_false(array.eq({1,2,3}, {}))
    end)
  end)
  describe("find", function()
    it("should return the first element matching the condition", function()
      local v, i = array.find({}, always(true))
      assert.is_nil(v)
      assert.is_nil(i)
      v, i = array.find({1,2,3,2,1}, eq(0))
      assert.is_nil(v)
      assert.is_nil(i)
      v, i = array.find({1,2,3,2,1}, 2, eq(0))
      assert.is_nil(v)
      assert.is_nil(i)
      v, i = array.find({1,2,3,2,1}, 2, 4, eq(1))
      assert.is_nil(v)
      assert.is_nil(i)
      v, i = array.find({1,2,3,2,1}, eq(2))
      assert.equal(2, v)
      assert.equal(2, i)
      v, i = array.find({1,2,3,2,1}, 2, eq(1))
      assert.equal(1, v)
      assert.equal(5, i)
      v, i = array.find({1,2,3,2,1}, 2, 4, eq(3))
      assert.equal(3, v)
      assert.equal(3, i)
      v, i = array.find({1,2,3,2,1}, 2, 4, eq(2))
      assert.equal(2, v)
      assert.equal(2, i)
    end)
  end)
  describe("findlast", function()
    it("should return the last element matching the condition", function()
      local v, i = array.findlast({1,2,3,2,1}, eq(0))
      assert.is_nil(v)
      assert.is_nil(i)
      v, i = array.findlast({1,2,3,2,1}, eq(2))
      assert.equal(2, v)
      assert.equal(4, i)
      v, i = array.findlast({1,2,3,2,1}, 2, eq(0))
      assert.is_nil(v)
      assert.is_nil(i)
      v, i = array.findlast({1,2,3,2,1}, 2, eq(1))
      assert.equal(1, v)
      assert.equal(5, i)
      v, i = array.findlast({1,2,3,2,1}, 2, 4, eq(1))
      assert.is_nil(v)
      assert.is_nil(i)
      v, i = array.findlast({1,2,3,2,1}, 2, 4, eq(3))
      assert.equal(3, v)
      assert.equal(3, i)
      v, i = array.findlast({1,2,3,2,1}, 2, 4, eq(2))
      assert.equal(2, v)
      assert.equal(4, i)
    end)
  end)
  describe("findall", function()
    it("should return all the elements matching the condition", function()
      assert.same({}, array.findall({1,2,3,2,1}, eq(0)))
      assert.same({2,2}, array.findall({1,2,3,2,1}, eq(2)))
      assert.same({1,2,2,1}, array.findall({1,2,3,2,1}, lt(3)))
    end)
  end)
  describe("contains", function()
    it("should return true if the value is in the array", function()
      assert.is_true(array.contains({1,2,3}, 3))
      assert.is_true(array.contains({1,2,3}, 3, 2))
      assert.is_true(array.contains({1,2,3}, 3, 2, 3))
      assert.is_true(array.contains({1,2,3}, 3, 2, 3, id))
    end)
    it("should return false if the value is not in the array", function()
      assert.is_false(array.contains({1,2,3}, 0))
      assert.is_false(array.contains({1,2,3}, 1,2))
      assert.is_false(array.contains({1,2,3}, 3, 1,2))
    end)
  end)
  describe("isempty", function()
    it("should return true if the array is empty", function()
      assert.is_true(array.isempty({}))
      assert.is_true(array.isempty({a = 1}))
    end)
    it("should return false if the array is not empty", function()
      assert.is_false(array.isempty({1}))
    end)
  end)
  describe("indexof", function()
    it("should return the index of the first element equal to the input value", function()
      assert.is_nil(array.indexof({1,2,3}, 0))
      assert.is_nil(array.indexof({1,2,3}, 1,2))
      assert.equal(2, array.indexof({1,2,3,2,1}, 2))
      assert.equal(2, array.indexof({1,2,3,2,1}, 2, 2))
      assert.equal(2, array.indexof({1,2,3,2,1}, 2, 2, 4))
      assert.equal(1, array.indexof({1,2,3,2,1}, 2, function(x, y) return x == y - 1 end))
    end)
  end)
  describe("lastindexof", function()
    it("should return the index of the last element equal to the input value", function()
      assert.is_nil(array.lastindexof({1,2,3}, 0))
      assert.is_nil(array.lastindexof({1,2,3}, 1,2))
      assert.equal(4, array.lastindexof({1,2,3,2,1}, 2))
      assert.equal(4, array.lastindexof({1,2,3,2,1}, 2, 2))
      assert.equal(4, array.lastindexof({1,2,3,2,1}, 2, 2, 4))
      assert.equal(5, array.lastindexof({1,2,3,2,1}, 2, function(x, y) return x == y - 1 end))
    end)
  end)
  describe("range", function()
    it("should return the specified range", function()
      assert.same({1,2}, array.range({1,2,3}, 1,2))
      assert.same({2}, array.range({1,2,3}, 2, 2))
      assert.same({}, array.range({1,2,3}, 4, 4))
      assert.same({}, array.range({}, 1,1))
    end)
  end)
  describe("reverse", function()
    it("should reverse the specified range", function()
      assert.same({}, array.reverse({}))
      assert.same({3,2,1}, array.reverse({1,2,3}))
      assert.same({1,3, 2}, array.reverse({1,2,3}, 2))
    end)
  end)
  describe("fill", function()
    it("should fill the array with the right value", function()
      assert.same({1,1,1}, array.fill({1,2,3}, 1))
      assert.same({}, array.fill({1,2,3}))
    end)
  end)
  describe("grow", function()
    it("should grow the array", function()
      assert.same({true}, array.grow({}, 1))
      assert.same({1,1,1,1,1}, array.grow({}, 5, 1))
      assert.same({true, true, true, true, true}, array.grow({true}, 5))
      assert.same({1,2,1,1,1}, array.grow({1,2}, 5, 1))
    end)
  end)
  describe("shrink", function()
    it("should shrink the array to the given size", function()
      assert.same({}, array.shrink({}, 0))
      assert.same({}, array.shrink({1,2,3}, 0))
      assert.same({1,2}, array.shrink({1,2,3}, 2))
    end)
  end)
  describe("removeat", function()
    it("should remove the value at the given index", function()
      assert.is_nil(array.removeat({1}, 2))
      assert.equal(1, array.removeat({1}, 1))
      assert.equal(2, array.removeat({1,2,3}, 2))
    end)
  end)
  describe("removerange", function()
    it("should remove the value at the given index", function()
      assert.same({}, array.removerange({1}, 2))
      assert.same({}, array.removerange({1}, 1))
      assert.same({1}, array.removerange({1,2,3}, 2, 3))
      assert.same({1,3}, array.removerange({1,2,3}, 2, 2))
      assert.same({1,5}, array.removerange({1,2,3,4,5}, 2, 4))
    end)
  end)
  describe("remove", function()
    it("should remove the given value", function()
      assert.is_true(array.remove({1,2,3}, 1))
      assert.is_false(array.remove({1,2,3}, 6))
      assert.is_false(array.remove({1,2,3}, 1,2))
      assert.is_false(array.remove({1,2,3}, 5, 1, 4))
    end)
  end)
  describe("removeall", function()
    it("should remove all the ocurrences of the given value", function()
      assert.equal(2, array.removeall({1,2,3,2,1}, 2))
      assert.equal(1, array.removeall({1,2,3,2,1}, 1,2))
      assert.equal(1, array.removeall({1,2,3,2,1}, 2, 3))
      assert.equal(2, array.removeall({1,2,3,2,1},2,1, 4))
    end)
  end)
  describe("removeif", function()
    it("should remove the first element satisfying the specified condition", function()
      assert.is_true(array.removeif({1,2,3}, eq(3)))
      assert.is_true(array.removeif({1,2,3}, 2, eq(3)))
      assert.is_true(array.removeif({1,2,3}, 2, 3, eq(3)))
      assert.is_false(array.removeif({1,2,3}, eq(4)))
    end)
  end)
  describe("removeallif", function()
    it("should remove all the elements satisfying the specified condition", function()
      assert.equal(2, array.removeallif({1,2,3,2,1}, eq(2)))
      assert.equal(2, array.removeallif({1,2,3,2,1}, 1, eq(2)))
      assert.equal(1, array.removeallif({1,2,3,2,1}, 2, 3, eq(2)))
      assert.equal(2, array.removeallif({1,2,3,2,1}, 1, 4, eq(2)))
    end)
  end)
  describe("tostring", function()
    it("should return the proper string representation", function()
      assert.equal('{}', array.tostring({}))
      assert.equal('{1}', array.tostring({1}))
      assert.equal('{1, 2}', array.tostring({1,2}))
      assert.equal('{1, ..}', array.tostring({1,2}, 1,1))
      assert.equal('{.., 2}', array.tostring({1,2}, 2))
      assert.equal('{.., 2, ..}', array.tostring({1,2,3}, 2, 2))
    end)
  end)
  describe("each", function()
    it("should invoke the target function on each element", function()
      local n = 0
      array.each({}, function() n = n + 1 end)
      assert.equal(0, n)
      n = 0
      array.each({1,2,3,4,5}, function() n = n + 1 end)
      assert.equal(5, n)
      n = 0
      array.each({1,2,3,4,5}, 3, function() n = n + 1 end)
      assert.equal(3, n)
    end)
  end)
  describe("values", function()
    it("should return an iterator on a range of the array", function()
      local n = 0
      for _ in array.values({}) do n = n + 1 end
      assert.equal(0, n)
      n = 0
      for _ in array.values({1,2,3,4,5}) do n = n + 1 end
      assert.equal(5, n)
      n = 0
      for _ in array.values({1,2,3,4,5}, 3) do n = n + 1 end
      assert.equal(3, n)
    end)
  end)
end)
